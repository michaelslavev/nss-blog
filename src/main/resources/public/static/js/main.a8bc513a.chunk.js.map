{"version":3,"sources":["js/components/Navbar.js","js/pages/Homepage.js","js/pages/Login.js","js/components/Logout.js","App.js","serviceWorker.js","redux/ReduxStore.js","index.js"],"names":["Navbar","className","to","this","props","loggedIn","onClick","logout","React","Component","connect","state","ownProps","dispatch","type","Homepage","Login","loginRequest","e","preventDefault","data","username","document","querySelector","value","password","fetch","method","headers","body","JSON","stringify","then","status","ok","json","userLoggedIn","catch","error","console","log","login","resp","onSubmit","htmlFor","id","placeholder","user","Logout","App","exact","path","component","Boolean","window","location","hostname","match","initState","sessionStorage","getItem","rootReducer","action","setItem","clear","store","createStore","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a8bc513a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Link from 'react-router-dom/Link';\r\n\r\nclass Navbar extends React.Component {\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"navbar-wrapper\">\r\n                <nav>\r\n                    <ul>\r\n                        <li><Link to={'/'}>Homepage</Link></li>\r\n                        <li><Link to={'/login'}>Login</Link></li>\r\n                        {this.props.loggedIn ? <li><Link to={'/j_spring_security_logout'} onClick={this.props.logout}>Logout</Link></li> : null}\r\n                        <li><a>4</a></li>\r\n                        <li><a>5</a></li>\r\n                        <li><a>6</a></li>\r\n\r\n                    </ul>\r\n                </nav>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        loggedIn: state.loggedIn\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        logout: () => {\r\n            dispatch({ type: 'LOGOUT'});\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Navbar);","import React, {Component} from 'react';\r\n\r\nimport Navbar from '../components/Navbar.js';\r\n\r\nclass Homepage extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className=\"homepage-wrapper\">\r\n                <Navbar/>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Homepage","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Navbar from '../components/Navbar.js';\r\n\r\n\r\n\r\n\r\nclass Login extends React.Component {\r\n    loginRequest = (e) => {\r\n        e.preventDefault();\r\n        let data = {\r\n            username: document.querySelector('input#username-input').value,\r\n            password: document.querySelector('input#password-input').value\r\n        }\r\n\r\n        let response1;\r\n        fetch('http://localhost:8080/api/users/login', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        }).then((data) => {\r\n            if (data.status === 202 && data.ok) {\r\n                \r\n                data.json().then(data => this.props.userLoggedIn(data));\r\n            }\r\n        }).catch(error => { console.log(error) });\r\n    }\r\n\r\n    login = (data) => {\r\n        fetch('http://localhost:8080/api/users/current', {\r\n        }).then((resp) => {\r\n            resp.json().then((data) =>\r\n                this.props.userLoggedIn(data))\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"login-wrapper\">\r\n                <Navbar></Navbar>\r\n                <form onSubmit={this.loginRequest}>\r\n                    <label htmlFor=\"username-input\">username:</label>\r\n                    <input id=\"username-input\" placeholder=\"Username\"></input>\r\n                    <label htmlFor=\"password-input\">password:</label>\r\n                    <input id=\"password-input\" type=\"password\" placeholder=\"password\"></input>\r\n                    <button type=\"submit\">submit</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        userLoggedIn: (user) => {\r\n            dispatch({ type: 'LOGGING_IN', user: user });\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.user\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","import React, {Component} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nimport Navbar from '../components/Navbar.js';\r\n\r\nclass Logout extends React.Component{\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"logout-wrapper\">\r\n                <Redirect to=\"/\" ></Redirect>>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Logout","import React, {Component} from 'react';\r\nimport {BrowserRouter as Router, Link, Switch, Route} from 'react-router-dom';\r\n\r\nimport Homepage from './js/pages/Homepage.js';\r\nimport Login from './js/pages/Login.js'\r\nimport Logout from './js/components/Logout.js';\r\n\r\n\r\n\r\nclass App extends Component{\r\n  render(){\r\n    return (\r\n        <Router>\r\n          <Route exact path=\"/\" component={Homepage}></Route>\r\n          <Route exact path=\"/login\" component={Login}></Route>\r\n          <Route exact path=\"/j_spring_security_logout\" component={Logout}></Route>\r\n        </Router>\r\n      );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const initState = {\r\n    loggedIn: sessionStorage.getItem(\"loggedin\") || false,\r\n    user: sessionStorage.getItem(\"user\") || null\r\n}\r\n\r\nconst rootReducer = (state = initState, action) => {\r\n\r\n    if(action.type == 'LOGGING_IN'){\r\n        sessionStorage.setItem(\"user\",JSON.stringify(action.user));\r\n        sessionStorage.setItem(\"loggedin\", true);\r\n        return{\r\n            ...state,\r\n            loggedIn: true,\r\n            user:action.user\r\n        }\r\n    } else if(action.type == 'LOGOUT'){\r\n        sessionStorage.clear();\r\n        return {\r\n            ...state,\r\n            loggedIn:false,\r\n            user:null\r\n        }\r\n    }\r\n\r\n    return state;\r\n}\r\n\r\nexport default rootReducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/styles.css';\r\nimport App from './App';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport rootReducer from './redux/ReduxStore';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}